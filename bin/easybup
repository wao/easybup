#!/usr/bin/env ruby

require 'main'
require 'easybup'
require 'pp'


include Easybup

Main{

    def get_config
        cfg_file = params["config"].value
        if !cfg_file.exist?
            puts "Config file #{cfg_file} is not avaliable"
            exit_failure!
        end

        cfg = Config.parse( cfg_file )
        cfg
    end

    option("config"){
        optional
        argument_required
        cast :pathname
        defaults Pathname.new( Dir.home ) + ".config/easybup/config.rb"
    }

    option("dry-run"){
        optional
    }


    def run
        puts params["config"].value.class
        exit_success!
    end

    mode :"create-config" do
        option("force"){
            optional
        }

        def run
            cfg_file = params["config"].value
            if !params["force"].given?
                if cfg_file.exist?
                    puts "Config file #{cfg_file} is aleardy defined. Use --force to override it"
                    exit_failure!
                end
            end

            cfg_file.parent.mkpath
            cfg_file.write( INIT_CFG_FILE )
        end
    end

    mode :list do
        option("all"){
            optional
        }

        def run
            cfg = get_config
            puts "Sources:"
            cfg.sources.each_pair do |name, source|
                puts "  #{source.exists? ? '*':' '}   #{source.name}  #{source.path.join(' ')}"
            end

            puts "\n"

            puts "Repos:"
            cfg.repos.each_pair do |name, repo|
                puts "  #{repo.exists? ? '*':' '}   #{repo.name}  #{repo.bup_root}"
            end

            puts "\n"

            puts "Tasks:"
            cfg.tasks.each_pair do |name, task|
                puts "  #{task.exists? ? '*':' '}   #{task.name}  #{task.source.name}  #{task.repo.name}"
            end
        end
    end

    mode :save do
        argument("task"){
            optional
        }

        option("keep-exclude-files"){
            optional
        }

        option("no-index"){
            optional
        }

        def run
            cfg = get_config
            task = nil
            if params["task"].given?
                task_name = params[ "task" ].value.to_sym
                if cfg.tasks.include? task_name
                    task = cfg.tasks[task_name]
                    if !task.exists?
                        if !task.source.exists?
                            puts "Folder #{task.source.path.join(" ")} is not exist"
                            exit_failure!
                        end
                        if !task.repo.exists?
                            puts "Folder #{task.repo.bup_root} is not exist"
                            exit_failure!
                        end
                    end
                else
                    puts "Unkown task #{task_name}"
                    exit_failure!
                end
            end

            if task.nil?
                ava_tasks = cfg.tasks.select{ |n,t| t.exists? }
                if ava_tasks.empty?
                    puts "No avaliabe task."
                    exit_failure!
                end

                if ava_tasks.keys.length > 1 
                    puts "More than one task avaliabe, please choose one"
                    exit_failure!
                end

                task = ava_tasks.values.first
            end

            if !params["no-index"].given?
                if params[ "keep-exclude-files" ].given?
                    task.source.exclude_files.each do |f|
                        FileUtils.cp f.path, File.basename( f.path )
                    end
                end
                system( task.cmd_index(false, true) )
            end
            puts task.cmd_save
            system( task.cmd_save )
        end

    end

    mode :index do
        argument("task"){
            optional
        }

        option("keep-exclude-files"){
            optional
        }

        option("exclude-bash-only"){
            optional
        }

        option("no-update"){
            optional
        }

        def run
            cfg = get_config
            task = nil
            if params["task"].given?
                task_name = params[ "task" ].value.to_sym
                if cfg.tasks.include? task_name
                    task = cfg.tasks[task_name]
                    if !task.exists?
                        if !task.source.exists?
                            puts "Folder #{task.source.path.join(" ")} is not exist"
                            exit_failure!
                        end
                        if !task.repo.exists?
                            puts "Folder #{task.repo.bup_root} is not exist"
                            exit_failure!
                        end
                    end
                else
                    puts "Unkown task #{task_name}"
                    exit_failure!
                end
            end

            if task.nil?
                ava_tasks = cfg.tasks.select{ |n,t| t.exists? }
                if ava_tasks.empty?
                    puts "No avaliabe task."
                    exit_failure!
                end

                if ava_tasks.keys.length > 1 
                    puts "More than one task avaliabe, please choose one"
                    exit_failure!
                end

                task = ava_tasks.values.first
            end

            if params[ "exclude-bash-only" ].given? 
                task.source.execute_bash
                task.source.exclude_files.each do |f|
                    FileUtils.cp f.path, File.basename( f.path )
                end
            else
                puts task.cmd_index(params["no-update"].given?)
                if params[ "keep-exclude-files" ].given?
                    task.source.exclude_files.each do |f|
                        FileUtils.cp f.path, File.basename( f.path )
                    end
                end
                system( task.cmd_index(params["no-update"].given?) )
            end
        end
    end
}
